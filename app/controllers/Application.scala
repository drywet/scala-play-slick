package controllers

import java.util.UUID
import java.util.concurrent.TimeUnit
import Tables.{AaaT, Aaa, AaaRow}
import com.google.inject.Inject
import play.api._
import play.api.db.slick.DatabaseConfigProvider
import play.api.mvc._
import play.api.libs.json._
import slick.ast.{MappedScalaType, Library}
import slick.backend.DatabaseConfig
import slick.driver.{PostgresDriver, JdbcProfile}
import slick.jdbc.JdbcBackend
import slick.driver.PostgresDriver.api._
import slick.lifted._
import com.bfil.automapper._
import slick.profile.RelationalTableComponent
import utils.SlickExtension

import scala.concurrent.{Future, Await}
import scala.concurrent.duration.Duration
import scala.concurrent.ExecutionContext.Implicits.global
import scala.language.postfixOps
import scala.reflect.ClassTag

class Application @Inject()(val dbConfigProvider: DatabaseConfigProvider) extends Controller {

  import SlickExtension._

  case class Dto(uuid: java.util.UUID)

  case class Response(query: String, dto: Seq[Dto])

  implicit val dtoFormat: Format[Dto] = Json.format[Dto]
  implicit val responseFormat: Format[Response] = Json.format[Response]

  val db = dbConfigProvider.get[JdbcProfile].db

  def index = Action.async { request =>
    // map Aaa table query to Dto without any hand-written converters using autogenerated one instead
    val query = Tables.Aaa.map(_.>>[Dto])
    db.run(query.result).map { rows =>
      Ok(Json.toJson(Response(query.result.statements.head, rows)))
    }
    ////Future(Ok(""))
  }

}
